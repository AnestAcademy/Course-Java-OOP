# So sánh mạnh mẽ với Lambda

<br />

Trong hướng dẫn này, chúng ta sẽ nói về những hỗ trợ của Lambda trong Java 8 - đặc biệt là cách tận dụng nó để viết `Comparator` và sắp xếp một `Collection`.

Đầu tiên, chúng ta tạo một đối tượng sẽ sử dụng trong bài viết:

```java
public class Human {
    private String name;
    private int age;
 
    public Human() {}
 
    public Human(String name, int age) {
        this.name = name;
        this.age = age;
    }
 
    //standard getters/setters, equals and hashcode
}
```

<br />

## I. Sort cơ bản không sử dụng Lambda

Trước Java 8, để sắp xếp một Collection sẽ liên quan đến việc tạo một lớp bên trong vô danh cho `Comparator` được sử dụng trong sắp xếp:
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Jack", 12));

Collections.sort(humans, new Comparator<Human>() {
    @Override
    public int compare(Human h1, Human h2) {
        return h1.getName().compareTo(h2.getName());
    }
});
```

<br />

## II. Sort cơ bản sử dụng Lambda

Với sự ra đời của Lambdas, bây giờ chúng ta có thể bỏ qua lớp bên trong vô danh và đạt được kết quả tương tự với ngữ nghĩa đơn giản, chức năng:
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Jack", 12));

humans.sort((Human h1, Human h2) -> h1.getName().compareTo(h2.getName()));
```
*Lưu ý rằng: chúng ta đang sử dụng API sắp xếp mới được thêm vào `java.util.List` trong Java 8 - thay vì API `Collections.sort` cũ.*

Chúng ta có thể đơn giản hóa hơn nữa biểu thức bằng cách không chỉ định các định nghĩa kiểu dữ liệu - trình biên dịch có khả năng suy ra các định nghĩa này:
```java
humans.sort((h1, h2) -> h1.getName().compareTo(h2.getName()));
```

<br />

## III. Sort sử dụng Reference to Static Method

Tiếp theo, chúng ta sẽ thực hiện sắp xếp bằng cách sử dụng một biểu thức Lambda với tham chiếu đến một phương `Static`.

Đầu tiên, chúng ta sẽ định nghĩa phương thức `compareByNameThenAge` trong class `Human` - giống như phương thức so sánh trong một đối tượng Comparator<Human>

#### *Human.java*
```java
public static int compareByNameThenAge(Human h1, Human h2) {
    if (h1.name.equals(h2.name)) {
        return h1.age - h2.age;
    } else {
        return h1.name.compareTo(h2.name);
    }
}
```
Bây giờ chúng ta có thể sử dụng phương thức Static như một trình so sánh:
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Jack", 12));

humans.sort(Human::compareByNameThenAge);
```

References: [Method references](../../../../blob/master/Java%208/4.%20Method%20References.md)

<br />

## IV. Sort Extracted Comparators

Chúng ta cũng không cần xác định logic so sánh bằng cách sử dụng một `instance method reference` và phương thức `Comparator.comparing` - nó trích xuất và tạo ra một `Comparable` dựa trên hàm đó.

> Comparable interface được sử dụng để sắp xếp các đối tượng của lớp do người dùng định nghĩa (user-defined). Interface này thuộc về gói `java.lang` và chỉ chứa một phương thức có tên `compareTo(Object)`.

<br />

### 1. Comparator.comparing

#### 1.1.  Key Selector Variant

Hàm static `Comparator.comparing` chấp nhận một hàm trích xuất một khóa sắp xếp `Comparable` (function that extracts a Comparable sort key) từ một kiểu T và trả về một `Comparator` so sánh với khóa sắp xếp đó.
```java
public static <T, U extends Comparable<? super U>> Comparator<T> comparing(
               Function<? super T, ? extends U> keyExtractor)
```

Chúng ta sẽ sử dụng `getName()` để xây dựng biểu thức Lambda (Method references) và sắp xếp danh sách theo tên:
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 12));
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Zack", 12));

Comparator<Human> humanNameComparator = Comparator.comparing(Human::getName); // return Comparator
Collections.sort(humans, humanNameComparator);

//or in java 8
Collections.sort(humans, Comparator.comparing(Human::getName));

//or 
Comparator<Human> humanNameComparator = Comparator.comparing(Human::getName);
humans.sort(humanNameComparator);

//or
humans.sort(Comparator.comparing(Human::getName));

//or
humans.sort(Comparator.comparing(human -> human.getName()));
```
References: [Method references](../../../../blob/master/Java%208/4.%20Method%20References.md)

#### 1.2. Key Selector and Comparator Variant

Có một tùy chọn khác tạo điều kiện ghi đè thứ tự tự nhiên của khóa sắp xếp bằng cách cung cấp trình so sánh (Comparator) tạo ra một thứ tự tùy chỉnh cho khóa sắp xếp:
```java
public static <T, U> Comparator<T> comparing(
               Function<? super T, ? extends U> keyExtractor,
               Comparator<? super U> keyComparator)
```
Bây giờ chúng ta sẽ sửa ví dụ ở trên, ghi đè thứ tự sắp xếp tự nhiên theo tên bằng cách cung cấp một trình so sánh để sắp xếp các tên theo thứ tự giảm dần làm đối số thứ hai cho Comparator.comparing:
```java
Comparator<Human> humanNameComparator = Comparator.comparing(
                                        Human::getName, (s1, s2) -> s2.compareTo(s1));
humans.sort(humanNameComparator);
```

<br />

### 2. Reverse Sort

JDK 8 cũng đã giới thiệu một phương pháp trợ giúp để đảo ngược trình so sánh - chúng ta có thể sử dụng nhanh chóng để đảo ngược loại so sánh:
```java
List<Human> humans = Lists.newArrayList(
    new Human("Sarah", 10), 
    new Human("Jack", 12)
);

Comparator<Human> comparator = (h1, h2) -> h1.getName().compareTo(h2.getName());
humans.sort(comparator.reversed());

//or
Comparator<Human> comparator = Comparator.comparing(Human::getName);
humans.sort(comparator.reversed());

//or
humans.sort(Comparator.comparing(Human::getName).reversed());
```
<br />

### 3. Comparator.comparingInt

`Comparator.comparingInt` hoạt động tương tự `Comparator.comparing` nhưng chỉ dành cho `int`.
```java
public static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor)
```
Ví dụ sắp xếp List Human theo tuổi
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 12));
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Zack", 12));
    
humans.sort(Comparator.comparingInt(Human::getAge));
```
Ví dụ sắp xếp một List số nguyên
```java
List<Integer> items = new ArrayList<>();
    items.add(5);
    items.add(2);
    items.add(8);
    items.add(6);
    items.add(1);

    items.sort(Comparator.comparingInt(o -> o));
```
Tương tự chúng ta cũng có `comparingLong()`, `comparingDouble()`.

<br />

## V. Sort với nhiều tiêu chí

Chúng ta cũng có thể viết các biểu thức phức tạp hơn - ví dụ như sắp xếp các đối tượng theo tên, và sau đó theo độ tuổi:
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 12));
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Zack", 12));
     
humans.sort((h1, h2) -> {
    if (h1.getName().equals(h2.getName())) {
        return h1.getAge() - h2.getAge();
    } else {
        return h1.getName().compareTo(h2.getName());
    }
});
```
Bắt đầu với JDK 8, bây giờ chúng ta có thể kết nối nhiều bộ so sánh với nhau để xây dựng logic so sánh phức tạp hơn:
```java
List<Human> humans = new ArrayList();
    humans.add(new Human("Sarah", 12));
    humans.add(new Human("Sarah", 10));
    humans.add(new Human("Zack", 12));
     
humans.sort(Comparator.comparing(Human::getName).thenComparingInt(Human::getAge));
```

<br />

##  

© Copyright
> ANEST LEARNING  
> Join us: &nbsp;&nbsp;&nbsp; [Facebook groups](https://www.facebook.com/groups/anest.learning/)  
> Website: &nbsp; [https://anest.dev](https://anest.dev) 
